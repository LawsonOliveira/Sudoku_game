
###########################################################################################################################################################
######################################################### Import des fonctions ############################################################################
###########################################################################################################################################################
import sys
from pathlib import Path
file = Path(__file__).resolve()
package_root_directory = file.parents[1]
sys.path.append(str(package_root_directory))

from pytest import *
from Grid.Play_a_move import *
from io import StringIO
from Data.Auxiliary_grids.Additional_grids import *
from Data.Auxiliary_grids.Easy_grids import *

###########################################################################################################################################################
####################################################### Testes des fonctions de Play_a_move #######################################################
###########################################################################################################################################################


# Teste de la fonction qui vérifie si il est possible pour l'utilisateur de changer le valeur de la grille
def test_check_coord():
    assert(check_coord(grid_f1))==[(1, 1), (3, 1), (4, 1), (6, 1), (9, 1), (3, 2), (6, 2), (7, 2), (1, 3), (4, 3), (5, 3), (6, 3), (7, 3), (8, 3), (9, 3), (1, 4), (2, 4), (3, 4), (4, 4), (6, 4), (8, 4), (9, 4), (2, 5), (3, 5), (6, 5), (7, 5), (6, 6), (7, 6), (1, 7), (2, 7), (4, 7), (5, 7), (6, 7), (9, 7), (1, 8), (2, 8), (6, 8), (1, 9), (3, 9), (4, 9), (7, 9), (8, 9), (9, 9)]
    assert(check_coord(grid_f2))==[(1, 1), (2, 1), (3, 1), (4, 1), (7, 1), (8, 1), (2, 2), (3, 2), (9, 2), (2, 3), (5, 3), (6, 3), (1, 4), (3, 4), (4, 4), (5, 4), (9, 4), (2, 5), (3, 5), (5, 5), (6, 5), (7, 5), (8, 5), (9, 5), (1, 6), (2, 6), (3, 6), (5, 6), (9, 6), (1, 7), (3, 7), (6, 7), (7, 7), (8, 7), (2, 8), (3, 8), (6, 8), (8, 8), (2, 9), (6, 9), (7, 9), (8, 9), (9, 9)]
    assert(check_coord(grid_f3))==[(1, 1), (4, 1), (6, 1), (1, 2), (2, 2), (4, 2), (8, 2), (1, 3), (2, 3), (3, 3), (4, 3), (5, 3), (7, 3), (8, 3), (9, 3), (3, 4), (4, 4), (7, 4), (9, 4), (1, 5), (3, 5), (4, 5), (5, 5), (7, 5), (8, 5), (9, 5), (1, 6), (2, 6), (4, 6), (5, 6), (7, 6), (8, 6), (1, 7), (3, 7), (5, 7), (7, 7), (2, 8), (3, 8), (4, 8), (5, 8), (6, 8), (8, 8), (8, 9)]


# Teste de la fonction qui renvoie un tuple de dimension 3 : (valeur voulue, abscisse, ordonnée)
def test_read_player_command(monkeypatch):
    command_0 = StringIO('s\n')   
    command_1 = StringIO('a\n')
    monkeypatch.setattr('sys.stdin',command_0)
    assert read_player_command(grid_e4)[0] == 's'

    monkeypatch.setattr('sys.stdin',command_1)
    assert read_player_command(grid_e4)[0] == 'a'


# Teste de la fonction qui renvoie une grille ayant pris en compte le coup du joueur
def test_update_grid():
    assert update_grid(grid_f1,[1,1,1])==[[1, 1, 0, 0, 4, 0, 2, 8, 0], [2, 5, 0, 8, 3, 0, 0, 6, 9], [0, 8, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 9, 0, 0], [7, 0, 0, 3, 9, 0, 0, 2, 8], [1, 9, 6, 2, 8, 0, 0, 7, 3], [0, 0, 8, 0, 0, 0, 6, 9, 0], [0, 0, 9, 7, 6, 0, 8, 1, 5], [0, 6, 0, 0, 2, 8, 0, 0, 0]]
    assert update_grid(grid_f1,[1,6,6])==[[0, 1, 0, 0, 4, 0, 2, 8, 0], [2, 5, 0, 8, 3, 0, 0, 6, 9], [0, 8, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 9, 0, 0], [7, 0, 0, 3, 9, 0, 0, 2, 8], [1, 9, 6, 2, 8, 1, 0, 7, 3], [0, 0, 8, 0, 0, 0, 6, 9, 0], [0, 0, 9, 7, 6, 0, 8, 1, 5], [0, 6, 0, 0, 2, 8, 0, 0, 0]]
    assert update_grid(grid_f1,[1,9,9])==[[0, 1, 0, 0, 4, 0, 2, 8, 0], [2, 5, 0, 8, 3, 0, 0, 6, 9], [0, 8, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 9, 0, 0], [7, 0, 0, 3, 9, 0, 0, 2, 8], [1, 9, 6, 2, 8, 0, 0, 7, 3], [0, 0, 8, 0, 0, 0, 6, 9, 0], [0, 0, 9, 7, 6, 0, 8, 1, 5], [0, 6, 0, 0, 2, 8, 0, 0, 1]]    
